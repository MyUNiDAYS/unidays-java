package com.myunidays;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class CodelessUrlVerifier {
    private static Pattern percentEncodingPattern = Pattern.compile("(%[A-Z0-9]{2})");
    private final byte[] key;

    public CodelessUrlVerifier(String key) {
        if (key == null)
            throw new IllegalArgumentException("Key cannot be null");

        if (key.isEmpty())
            throw new IllegalArgumentException("Key cannot be empty");

        this.key = Base64.decodeBase64(key);
    }

    private static String encode(String s) throws UnsupportedEncodingException {
        String encoded = URLEncoder.encode(s, "UTF-8");
        Matcher matcher = percentEncodingPattern.matcher(encoded);
        StringBuilder sb = new StringBuilder();
        int last = 0;

        while (matcher.find()) {
            sb.append(encoded, last, matcher.start());
            sb.append(matcher.group(0).toLowerCase());
            last = matcher.end();
        }
        sb.append(encoded.substring(last));

        return sb.toString();
    }

    private static String stringToHmacSHA512(String s, byte[] key) throws NoSuchAlgorithmException, InvalidKeyException {
        try {
            Mac mac = Mac.getInstance("HmacSHA512");
            SecretKeySpec secret_key = new SecretKeySpec(key, "HmacSHA512");
            mac.init(secret_key);

            return Base64.encodeBase64String(mac.doFinal(s.getBytes()));
        } catch (IllegalStateException | InvalidKeyException | NoSuchAlgorithmException e) {
            throw e;
        }
    }

    /**
     * Verifies that the url was generated by UNiDAYS and returns the time the url was
     * generated if it is valid
     *
     * @param url the url to be verified
     * @return the time that the url was generated if the url is verified, else empty
     */
    public Optional<ZonedDateTime> verifyUrl(URI url) {
        Map<String, String> params = URLEncodedUtils.parse(url, Charset.forName("UTF-8"))
                .stream()
                .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));

        if (!params.containsKey("ud_s") || !params.containsKey("ud_t") || !params.containsKey("ud_h"))
            throw new IllegalArgumentException("URL does not contain the required query parameters");

        return verifyUrlParams(params.get("ud_s"), params.get("ud_t"), params.get("ud_h"));
    }

    /**
     * Verifies that the url was generated by UNiDAYS and returns the time the url was
     * generated if it is valid
     *
     * @param ud_s the ud_s parameter from the url.
     * @param ud_t the ud_t parameter from the url.
     * @param ud_h the ud_h parameter from the url
     * @return the time that the url was generated if the url is verified, else empty
     */
    public Optional<ZonedDateTime> verifyUrlParams(String ud_s, String ud_t, String ud_h) {
        try {
            String url = String.format("?ud_s=%s&ud_t=%s", encode(ud_s), ud_t);

            String generatedHash = stringToHmacSHA512(url, this.key);

            if (ud_h.equals(generatedHash)) {
                long secondsSinceEpoch = Long.parseLong(ud_t);
                return Optional.of(ZonedDateTime.ofInstant(Instant.ofEpochSecond(secondsSinceEpoch), ZoneOffset.UTC));
            }

            return Optional.empty();
        } catch (Exception ex) {
            throw new RuntimeException("Unable to verify URL", ex);
        }
    }
}
